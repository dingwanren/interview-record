import{_ as t,c as a,o as l,ae as o}from"./chunks/framework.Dh1jimFm.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"interview/preparation.md","filePath":"interview/preparation.md"}'),s={name:"interview/preparation.md"};function n(i,e,p,r,d,c){return l(),a("div",null,e[0]||(e[0]=[o(`<h2 id="自我介绍" tabindex="-1">自我介绍 <a class="header-anchor" href="#自我介绍" aria-label="Permalink to &quot;自我介绍&quot;">​</a></h2><p>来自xxx,</p><p>上家公司做的前端开发,参与主要产品和内部平台的开发和维护,都是web项目,</p><p>主要产品,负责5,6个模块和部分公共页的开发和维护,也独立负责了一个内部平台的开发</p><p>都是使用的vue, 我个人比较熟悉vue,虽然没怎么用过react,我觉得我也比较熟悉js,上手也会很快</p><h2 id="vue-在渲染过程中-父子组件的生命周期是什么样的-更新的过程" tabindex="-1">vue: 在渲染过程中，父子组件的生命周期是什么样的？更新的过程？ <a class="header-anchor" href="#vue-在渲染过程中-父子组件的生命周期是什么样的-更新的过程" aria-label="Permalink to &quot;vue: 在渲染过程中，父子组件的生命周期是什么样的？更新的过程？&quot;">​</a></h2><p>当父子组件首次渲染时，生命周期钩子的执行顺序如下</p><ul><li>父组件先创建(created)，然后子组件创建</li><li>子组件先挂载(mounted)完成，然后父组件挂载完成</li></ul><p>当父组件状态变化导致重新渲染时：</p><ul><li>父组件更新触发子组件更新</li><li>子组件先完成更新，然后父组件完成更新</li></ul><p>当父组件销毁时：</p><ol><li><strong>父组件</strong>：<code>beforeDestroy</code></li><li><strong>子组件</strong>：<code>beforeDestroy</code></li><li><strong>子组件</strong>：<code>destroyed</code></li><li><strong>父组件</strong>：<code>destroyed</code></li></ol><h2 id="vue-v-model是什么东西" tabindex="-1">vue:v-model是什么东西 <a class="header-anchor" href="#vue-v-model是什么东西" aria-label="Permalink to &quot;vue:v-model是什么东西&quot;">​</a></h2><p>用于实现<strong>双向数据绑定</strong>的指令，本质上是一个语法糖</p><p>v-model 的工作原理可以概括为：</p><ol><li><strong>数据到视图</strong>：通过 <code>v-bind</code> 将数据绑定到表单元素的 value/checked 等属性</li><li><strong>视图到数据</strong>：通过 <code>v-on</code> 监听输入事件（如 input、change）来更新数据</li><li>相当于帮你做了这样的操作: <strong>文本输入框（input/textarea）</strong>：绑定 <code>value</code> 属性，监听 <code>input</code> 事件,<strong>复选框（checkbox）</strong>：绑定 <code>checked</code> 属性，监听 <code>change</code> 事件</li></ol><p><strong>自定义组件上的 v-model</strong> 在 Vue2 中，自定义组件使用 v-model 需要：</p><ol><li>接收一个名为 <code>value</code> 的 prop</li><li>在需要更新值时触发 <code>input</code> 事件</li></ol><h3 id="sync-修饰符" tabindex="-1">.sync 修饰符 <a class="header-anchor" href="#sync-修饰符" aria-label="Permalink to &quot;.sync 修饰符&quot;">​</a></h3><p>Vue2 还提供了 <code>.sync</code> 修饰符作为 v-model 的替代方案，允许&quot;双向绑定&quot;多个 prop：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;child-component :title.sync=&quot;pageTitle&quot;&gt;&lt;/child-component&gt;</span></span>
<span class="line"><span>&lt;!-- 等价于 --&gt;</span></span>
<span class="line"><span>&lt;child-component </span></span>
<span class="line"><span>  :title=&quot;pageTitle&quot; </span></span>
<span class="line"><span>  @update:title=&quot;pageTitle = $event&quot;&gt;</span></span>
<span class="line"><span>&lt;/child-component&gt;</span></span></code></pre></div><p>子组件通过 <code>this.$emit(&#39;update:title&#39;, newTitle)</code> 来更新</p><p>Vue3 里的: <strong>默认 prop 和事件名变更</strong>：</p><ul><li>默认 prop 名从 <code>value</code> 改为 <code>modelValue</code></li><li>默认事件名从 <code>input</code> 改为 <code>update:modelValue</code></li><li>移除sync修饰符</li></ul><h2 id="vue-nextick做什么的-怎么实现的" tabindex="-1">vue:nextick做什么的？怎么实现的 <a class="header-anchor" href="#vue-nextick做什么的-怎么实现的" aria-label="Permalink to &quot;vue:nextick做什么的？怎么实现的&quot;">​</a></h2><h2 id="浏览器-a标签与b标签通信-sessionstorage怎么样可以不同标签共享" tabindex="-1">浏览器：a标签与b标签通信，sessionstorage怎么样可以不同标签共享 <a class="header-anchor" href="#浏览器-a标签与b标签通信-sessionstorage怎么样可以不同标签共享" aria-label="Permalink to &quot;浏览器：a标签与b标签通信，sessionstorage怎么样可以不同标签共享&quot;">​</a></h2><p>不能吧,</p><p><strong>sessionStorage 不能在多个窗口或标签页之间共享数据，但是当通过 window.open 或链接打开新页面时(不能是新窗口)，新页面会复制前一页的 sessionStorage。</strong>(协议,域名,端口都会产生不同的域, 页面关闭就清除对应的域)</p><h2 id="es6-map与weakmap-有什么区别" tabindex="-1">es6:Map与weakMap 有什么区别 <a class="header-anchor" href="#es6-map与weakmap-有什么区别" aria-label="Permalink to &quot;es6:Map与weakMap 有什么区别&quot;">​</a></h2><table tabindex="0"><thead><tr><th style="text-align:left;">特性</th><th style="text-align:left;">Map</th><th style="text-align:left;">WeakMap</th></tr></thead><tbody><tr><td style="text-align:left;">键类型</td><td style="text-align:left;">任意类型</td><td style="text-align:left;">只能是对象（不包括基本类型）</td></tr><tr><td style="text-align:left;">垃圾回收</td><td style="text-align:left;">不会自动释放内存</td><td style="text-align:left;">键对象无引用时自动回收</td></tr><tr><td style="text-align:left;">可枚举性</td><td style="text-align:left;">可遍历（keys/values/entries）</td><td style="text-align:left;">不可遍历</td></tr><tr><td style="text-align:left;">大小查询</td><td style="text-align:left;">有 size 属性</td><td style="text-align:left;">无 size 属性</td></tr></tbody></table><h2 id="webpack-loader-与plugin-有什么区别-为什么需要loader的" tabindex="-1">webpack:loader 与plugin 有什么区别？为什么需要loader的 <a class="header-anchor" href="#webpack-loader-与plugin-有什么区别-为什么需要loader的" aria-label="Permalink to &quot;webpack:loader 与plugin 有什么区别？为什么需要loader的&quot;">​</a></h2><p>loader:让webpack能够处理非js文件(自身职能理解js)，转换成js,然后你就可以利用 webpack 的打包能力，对它们进行处理。 例如：css-loader、style-loader、postcss-loader、sass-loader</p><p>plugins:从打包优化和压缩，一直到重新定义环境中的变量.比如 生成HTML文件需要使用HtmlWebpackPlugin 例如：uglify-webpack-plugin、clean-webpack-plugin、babel-polyfill</p><h2 id="webpack-treeshaking怎么实现的" tabindex="-1">webpack:treeshaking怎么实现的 <a class="header-anchor" href="#webpack-treeshaking怎么实现的" aria-label="Permalink to &quot;webpack:treeshaking怎么实现的&quot;">​</a></h2><p>webpack实现tree shaking的原理是基于ES6模块化语法的静态特性。</p><p>在编译阶段，Webpack会根据模块的依赖关系，通过AST（抽象语法树）进行静态分析，识别出那些代码块（函数、变量、对象等）被引用并且使用了。然后将这些代码块打包输出到最终的打包文件中。在这个过程中，Webpack会自动将未被引用的代码块进行剔除，这个过程就是tree shaking。</p><p>具体来说，当Webpack在打包时遇到一个ES6模块导入语句（import），它会自动去加载这个模块并分析其导出对象。然后它会分析项目中哪些导出对象被引用了。如果一个导出对象没有被引用，那么Webpack会直接把它从最终的代码中剔除掉。</p><p>需要注意的是，tree shaking只对ES6模块生效，对于CommonJS等其他模块化规范，由于其动态加载特性，无法在静态分析阶段确定哪些代码块被引用，因此无法进行tree shaking。</p><p>另外，为了使Webpack能够正确识别和剔除未引用的代码块，开发者也需要做出一定的努力，例如将代码编写为纯函数的形式，避免使用全局变量等副作用等。</p><h2 id="换肤功能怎么实现" tabindex="-1">换肤功能怎么实现 <a class="header-anchor" href="#换肤功能怎么实现" aria-label="Permalink to &quot;换肤功能怎么实现&quot;">​</a></h2><p>用到scss, 在html元素上 setAttribute(&#39;theme-mode&#39;), 写样式的使用 用属性选择器[theme-mode=&#39;light&#39;] 匹配样式即可, 可以按主题分开放样式文件,比较好维护</p><p>##想反问的东西</p><p>评价一下我的表现,有什么不足之处呢</p><p>想了解一下贵司react的使用情况,大概会到什么水平可以胜任岗位呢</p>`,44)]))}const g=t(s,[["render",n]]);export{u as __pageData,g as default};
